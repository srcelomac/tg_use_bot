from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from utils.states import Main_menu
import keyboard
import sqlite3
import math
import os
import webbrowser
import random
import requests
import json
import string
import threading
from aiogram.enums import ParseMode

router = Router()
step = 0
answer_true = 0
answer_false = 0
task_id = 0
#flag_trainig = False

def diff_letters(a, b):
    return sum(a[i] != b[i] for i in range(min(len(a), len(b))))

task_4 = [
    ['аэропорты', 'аэропОрты'],
    ['банты', 'бАнты'],
    ['бороду', 'бОроду'],
    ['бухгалтеров', 'бухгАлтеров'],
    ['вероисповедание', 'вероисповЕдание'],
    ['водопровод', 'водопровОд'],
    ['газопровод', 'газопровОд'],
    ['гражданство', 'граждАнство'],
    ['дефис', 'дефИс'],
    ['дешевизна', 'дешевИзна'],
    ['диспансер', 'диспансЕр'],
    ['договорённость', 'договорЁнность'],
    ['документ', 'докумЕнт'],
    ['досуг', 'досУг'],
    ['еретик', 'еретИк'],
    ['жалюзи', 'жалюзИ'],
    ['значимость', 'знАчимость'],
    ['иксы', 'Иксы'],
    ['каталог', 'каталОг'],
    ['квартал', 'квартАл'],
    ['километр', 'киломЕтр'],
    ['конусов', 'кОнусов'],
    ['корысть', 'корЫсть'],
    ['краны', 'крАны'],
    ['кремень, кремня', 'кремЕнь, кремнЯ'],
    ['лекторов', 'лЕкторов'],
    ['локтя, локтей', 'лОктя, локтЕй'],
    ['лыжня', 'лыжнЯ'],
    ['местностей', 'мЕстностей'],
    ['намерение', 'намЕрение'],
    ['нарост', 'нарОст'],
    ['недруг', 'нЕдруг'],
    ['недуг', 'недУг'],
    ['некролог', 'некролОг'],
    ['ненависть', 'нЕнависть'],
    ['нефтепровод', 'нефтепровОд'],
    ['новостей', 'новостЕй'],
    ['ногтя, ногтей', 'нОгтя, ногтЕй'],
    ['отзыв (о книге)', 'Отзыв'],
    ['отзыв (посла из страны)', 'отзЫв'],
    ['отрочество', 'Отрочество'],
    ['партер', 'партЕр'],
    ['портфель', 'портфЕль'],
    ['поручни', 'пОручни'],
    ['приданое', 'придАное'],
    ['призыв', 'призЫв'],
    ['свёкла', 'свЁкла'],
    ['сироты', 'сирОты'],
    ['созыв', 'созЫв'],
    ['сосредоточение', 'сосредотОчение'],
    ['средства', 'срЕдства'],
    ['статуя', 'стАтуя'],
    ['столяр', 'столЯр'],
    ['таможня', 'тамОжня'],
    ['торты', 'тОрт'],
    ['туфля', 'тУфля'],
    ['цемент', 'цемЕнт'],
    ['центнер', 'цЕнтнер'],
    ['цепочка', 'цепОчка'],
    ['шарфы', 'шАрфы'],
    ['шофер', 'шофЁр'],
    ['эксперт', 'экспЕрт'],
    ['верна, верный', 'вернА, вЕрный'],
    ['значимый', 'знАчимый'],
    ['красивее', 'КрасИвее'],
    ['кухонный', 'кУхонный'],
    ['ловка, ловкий', 'ловкА, лОвкий'],
    ['мозаичный', 'мозаИчный'],
    ['оптовый', 'оптОвый'],
    ['прозорливый', 'прозорлИвый'],
    ['сливовый', 'слИвовый'],
    ['брала, брать', 'бралА, брАть'],
    ['бралась, браться', 'бралАсь, брАться'],
    ['взяла', 'взялА'],
    ['взялась, взяться', 'взялАсь, взЯться'],
    ['влилась, влиться', 'влилАсь, влИться'],
    ['ворвалась, ворваться', 'ворвалАсь, ворвАться'],
    ['воспринять', 'воспринЯть'],
    ['воссоздала', 'воссоздалА'],
    ['вручит', 'вручИт'],
    ['гнала', 'гналА'],
    ['гналась', 'гналАсь'],
    ['добрала', 'добралА'],
    ['добралась', 'добралАсь'],
    ['дождалась', 'дождалАсь'],
    ['дозвонится', 'дозвонИтся'],
    ['дозировать', 'дозИровать'],
    ['ждала', 'ждалА'],
    ['жилось', 'жилОсь'],
    ['закупорить', 'закУпорить'],
    ['занять, занял, заняла, заняли', 'занЯть, зАнял, занялА, зАняли'],
    ['заперла', 'заперлА'],
    ['запломбировать', 'запломбировАть'],
    ['защемит', 'защемИт'],
    ['звала', 'звалА'],
    ['звонит', 'звонИт'],
    ['кашлянуть', 'кАшлянуть'],
    ['клала', 'клАла'],
    ['клеить', 'клЕить'],
    ['кралась', 'крАлась'],
    ['кровоточить', 'кровоточИть'],
    ['лгала', 'лгалА'],
    ['лила', 'лИлА'],
    ['лилась', 'лИлась'],
    ['наврала', 'навралА'],
    ['наделит', 'наделИт'],
    ['надорвалась', 'надорвалАсь'],
    ['назвалась', 'назвалАсь'],
    ['накренится', 'накренИтся'],
    ['налила', 'налилА'],
    ['нарвала', 'нарвалА'],
    ['начать, начал, начала, начали', 'начАть, нАчал, началА, нАчали'],
    ['обзвонит', 'обзвонИт'],
    ['облегчить, облегчит', 'облегчИть, облегчИт'],
    ['облилась', 'облилАсь'],
    ['обнялась', 'обнялАсь'],
    ['обогнала', 'обогналА'],
    ['ободрала', 'ободралА'],
    ['ободрить, ободрит', 'ободрИть, ободрИт'],
    ['ободриться, ободрится', 'ободрИться, ободрИтся'],
    ['обострить', 'обострИть'],
    ['одолжить, одолжит', 'одолжИть, одолжИт'],
    ['озлобить', 'озлОбить'],
    ['оклеить', 'оклЕить'],
    ['окружит', 'окружИт'],
    ['опошлить', 'опОшлить'],
    ['Осведомиться, осведомится', 'освЕдомиться, освЕдомится'],
    ['отбыла', 'отбылА'],
    ['отдала', 'отдалА'],
    ['откупорить', 'откУпорить'],
    ['отозвала', 'отозвалА'],
    ['отозвалась', 'отозвалАсь'],
    ['перезвонит', 'перезвонИт'],
    ['перелила', 'перелилА'],
    ['плодоносить', 'плодоносИть'],
    ['пломбировать', 'пломбировАть'],
    ['повторит', 'повторИт'],
    ['позвала', 'позвалА'],
    ['позвонит', 'позвонИт'],
    ['полила', 'полилА'],
    ['положить, положил', 'положИть, положИл'],
    ['понять, поняла', 'понЯть, понялА'],
    ['послала', 'послАла'],
    ['прибыть, прибыл, прибыла, прибыли', 'прибЫть, прИбыл, прибылА, прИбыли'],
    ['принять, принял, приняла, приняли', 'принЯть, прИнял, принялА, прИняли'],
    ['рвала', 'рвалА'],
    ['сверлит', 'сверлИт'],
    ['сняла', 'снялА'],
    ['соврала', 'совралА'],
    ['создала', 'создалА'],
    ['сорвала', 'сорвалА'],
    ['сорит', 'сорИт'],
    ['убрала', 'убралА'],
    ['углубить', 'углубИть'],
    ['укрепит', 'укрепИт'],
    ['черпать', 'чЕрпать'],
    ['щемит', 'щемИт'],
    ['щёлкать', 'щЁлкать'],
    ['довезённый', 'довезЁнный'],
    ['загнутый', 'зАгнутый'],
    ['занятый, занята', 'зАнятый, занятА'],
    ['запертый', 'зАпертый'],
    ['заселённый, заселена', 'заселЁнный, заселенА'],
    ['кормящий', 'кормЯщий'],
    ['кровоточащий', 'кровоточАщий'],
    ['наживший', 'нажИвший'],
    ['наливший', 'налИвший'],
    ['нанявшийся', 'нанЯвшийся'],
    ['начавший', 'начАвший'],
    ['начатый', 'нАчатый'],
    ['низведённый', 'низведЁнный'],
    ['облегчённый', 'облегчЁнный'],
    ['ободрённый', 'ободрЁнный'],
    ['обострённый', 'обострЁнный'],
    ['отключённый', 'отключЁнный'],
    ['повторённый', 'повторЁнный'],
    ['поделённый', 'поделЁнный'],
    ['понявший', 'понЯвший'],
    ['принятый, принята', 'прИнятый, принятА'],
    ['приручённый', 'приручЁнный'],
    ['проживший', 'прожИвший'],
    ['снята', 'снятА'],
    ['согнутый', 'сОгнутый'],
    ['углублённый', 'углублЁнный'],
    ['закупорив', 'закУпорив'],
    ['начав', 'начАв'],
    ['начавшись', 'начАвшись'],
    ['отдав', 'отдАв'],
    ['подняв', 'поднЯв'],
    ['поняв', 'понЯв'],
    ['прибыв', 'прибЫв'],
    ['создав', 'создАв'],
    ['вовремя', 'вОвремя'],
    ['доверху', 'дОверху'],
    ['донельзя', 'донЕльзя'],
    ['донизу', 'дОнизу'],
    ['досуха', 'дОсуха'],
    ['засветло', 'зАсветло'],
    ['затемно', 'зАтемно'],
    ['красивее', 'красИвее'],
    ['надолго', 'надОлго'],
    ['ненадолго', 'ненадОлго']
]

tasks_common = [[['беспр_кословный', 'беспрекословный'], ['пр_клонный', 'преклонный'], ['пр_лестный', 'прелестный'], ['пр_небречь', 'пренебречь'], ['пр_небрежение', 'пренебрежение'], ['знаки пр_пинания', 'знаки препинания'], ['пр_пираться', 'препираться'], ['пр_пона', 'препона'], ['пр_поднести', 'преподнести'], ['пр_пятствие', 'препятствие'], ['пр_рекаться', 'пререкаться'], ['пр_рогатива', 'прерогатива'], ['пр_возносить', 'превозносить'], ['пр_зидент', 'президент'], ['пр_зидиум', 'президиум'], ['пр_следовать', 'преследовать'], ['пр_тензия', 'претензия'], ['пр_успеть', 'преуспеть'], ['пр_возмочь', 'превозмочь'], ['пр_амбула', 'преамбула'], ['пр_одолеть', 'преодолеть'], ['пр_стол', 'престол'], ['пр_мьера', 'премьера'], ['пр_взойти', 'превзойти'], ['пр_имущество', 'преимущество'], ['пр_возносить', 'превозносить'], ['пр_зентация', 'презентация'], ['пр_зентовать', 'презентовать'], ['пр_йскурант', 'прейскурант'], ['пр_людия', 'прелюдия'], ['пр_миальный', 'премиальный'], ['пр_мьера', 'премьера'], ['пр_валировать', 'превалировать'], ['пр_парат', 'препарат'], ['пр_сечь', 'пресечь'], ['пр_смыкаться', 'пресмыкаться'], ['пр_словутый', 'пресловутый'], ['пр_небрежительный', 'пренебрежительный'], ['пр_стиж', 'престиж'], ['пр_тендент', 'претендент'], ['пр_ткновение', 'преткновение'], ['воспр_пятствовать', 'воспрепятствовать'], ['непр_ложная (истина)', 'непреложная (истина)'], ['времяпр_провождение', 'времяпрепровождение'], ['пр_даваться мечтаниям', 'предаваться мечтаниям'], ['пр_клонять колени в храме', 'преклонять колени в храме'], ['пр_льщать', 'прельщать'], ['пр_подобный', 'преподобный'], ['пр_цедент', 'прецедент'], ['пр_грешение', 'прегрешение'], ['беспр_дельный', 'беспредельный'], ['беспр_станный', 'беспрестанный'], ['пр_фектура', 'префектура'], ['пр_людия', 'прелюдия'], ['пр_людно', 'прилюдно'], ['пр_баутка', 'прибаутка'], ['пр_бор', 'прибор'], ['пр_вереда', 'привереда'], ['пр_видение', 'привидение'], ['пр_вычка', 'привычка'], ['пр_годный', 'пригодный'], ['пр_дирчивый', 'придирчивый'], ['пр_вилегия', 'привилегия'], ['пр_гожий', 'пригожий'], ['пр_страстие', 'пристрастие'], ['пр_красы', 'прикрасы'], ['пр_верженец', 'приверженец'], ['пр_оритет', 'приоритет'], ['пр_ключение', 'приключение'], ['пр_скорбный', 'прискорбный'], ['пр_тязание', 'притязание'], ['пр_чудливый', 'причудливый'], ['пр_лежный', 'прилежный'], ['пр_говор', 'приговор'], ['без пр_крас', 'без прикрас'], ['беспр_страстный', 'беспристрастный'], ['пр_сяга', 'присяга'], ['пр_митивный', 'примитивный'], ['пр_ветливый', 'приветливый'], ['пр_вивка', 'прививка'], ['пр_влекательный', 'привлекательный'], ['пр_норовиться', 'приноровиться'], ['пр_чина', 'причина'], ['пр_язнь', 'приязнь'], ['непр_личный', 'неприличный'], ['непр_хотливый', 'неприхотливый'], ['пр_близительно', 'приблизительно'], ['пр_емлемый', 'приемлемый'], ['непр_емлемый', 'неприемлемый'], ['пр_каз', 'приказ'], ['пр_урочить', 'приурочить'], ['пр_ватный', 'приватный'], ['непр_ступная (крепость)', 'неприступная'], ['супер_яхта', 'суперъяхта'], ['из_ян', 'изъян'], ['ин_екция', 'инъекция'], ['под_есаул', 'подъесаул'], ['ад_ютант', 'адъютант'], ['неот_емлемый', 'неотъемлемый'], ['аб_юрация', 'абъюрация'], ['диз_юнкция', 'дизъюнкция'], ['кон_юнктивит', 'конъюнктивит'], ['кон_ектура', 'конъектура'], ['пан_европейский', 'панъевропейский'], ['транс_европейский', 'трансъевропейский'], ['фельд_егерь', 'фельдъегерь'], ['под_ячий', 'подьячий'], ['п_едестал', 'пьедестал'], ['ар_ергард', 'арьергард'], ['порт_ера', 'портьера'], ['пр_бывать (находиться)', 'пребывать'], ['пр_бывать (пр_езжать)', 'прибывать'], ['пр_емник (наследник)', 'преемник'], ['пр_емник (радиоаппарат)', 'приемник'], ['пр_зирать (ненавидеть)', 'презирать'], ['пр_зирать (заботиться)', 'призирать'], ['пр_ступить (нарушить)', 'преступить'], ['пр_ступить (начать)', 'приступить'], ['пр_творить (осуществить)', 'претворить'], ['пр_творить (закрыть)', 'притворить'], ['пр_дать (изменить)', 'предать'], ['пр_дать (добавить усилить)', 'придать'], ['пр_дел (конец)', 'предел'], ['пр_дел (пр_стройка)', 'придел'], ['пр_ходящее (временное)', 'преходящее'], ['пр_ходящий (тот кто пр_ходит)', 'приходящий'], ['пр_клоняться (уважать)', 'преклоняться'], ['приклоняться (наклониться)', 'приклоняться'], ['пр_вратный (неправильно истолковали)', 'превратный'], ['пр_вратник (тот который охраняет ворота)', 'привратник'], ['непр_ложный (тот который нельзя переделать)', 'непреложный'], ['пр_ложение (добавление)', 'приложение'], ['пр_терпеть (ся) (пр_выкнуть)', 'притерпеть'], ['пр_терпеть (пережить)', 'претерпеть']],
                [],
                [],
                [],
                [],
                [],
                []]

tasks_new_common = [[['беспр_кословный', 'е'], ['пр_клонный', 'е'], ['пр_лестный', 'е'], ['пр_небречь', 'е'], ['пр_небрежение', 'е'], ['знаки пр_пинания', 'е'], ['пр_пираться', 'е'], ['пр_пона', 'е'], ['пр_поднести', 'е'], ['пр_пятствие', 'е'], ['пр_рекаться', 'е'], ['пр_рогатива', 'е'], ['пр_возносить', 'е'], ['пр_зидент', 'е'], ['пр_зидиум', 'е'], ['пр_следовать', 'е'], ['пр_тензия', 'е'], ['пр_успеть', 'е'], ['пр_возмочь', 'е'], ['пр_амбула', 'е'], ['пр_одолеть', 'е'], ['пр_стол', 'е'], ['пр_мьера', 'е'], ['пр_взойти', 'е'], ['пр_имущество', 'е'], ['пр_возносить', 'е'], ['пр_зентация', 'е'], ['пр_зентовать', 'е'], ['пр_йскурант', 'е'], ['пр_людия', 'е'], ['пр_миальный', 'е'], ['пр_мьера', 'е'], ['пр_валировать', 'е'], ['пр_парат', 'е'], ['пр_сечь', 'е'], ['пр_смыкаться', 'е'], ['пр_словутый', 'е'], ['пр_небрежительный', 'е'], ['пр_стиж', 'е'], ['пр_тендент', 'е'], ['пр_ткновение', 'е'], ['воспр_пятствовать', 'е'], ['непр_ложная (истина)', 'е'], ['времяпр_провождение', 'е'], ['пр_даваться мечтаниям', 'е'], ['пр_клонять (колени в храме)', 'е'], ['пр_льщать', 'е'], ['пр_подобный', 'е'], ['пр_цедент', 'е'], ['пр_грешение', 'е'], ['беспр_дельный', 'е'], ['беспр_станный', 'е'], ['пр_фектура', 'е'], ['пр_людия', 'е'], ['пр_людно', 'и'], ['пр_баутка', 'и'], ['пр_бор', 'и'], ['пр_вереда', 'и'], ['пр_видение', 'и'], ['пр_вычка', 'и'], ['пр_годный', 'и'], ['пр_дирчивый', 'и'], ['пр_вилегия', 'и'], ['пр_гожий', 'и'], ['пр_страстие', 'и'], ['пр_красы', 'и'], ['пр_верженец', 'и'], ['пр_оритет', 'и'], ['пр_ключение', 'и'], ['пр_скорбный', 'и'], ['пр_тязание', 'и'], ['пр_чудливый', 'и'], ['пр_лежный', 'и'], ['пр_говор', 'и'], ['без пр_крас', 'и'], ['беспр_страстный', 'и'], ['пр_сяга', 'и'], ['пр_митивный', 'и'], ['пр_ветливый', 'и'], ['пр_вивка', 'и'], ['пр_влекательный', 'и'], ['пр_норовиться', 'и'], ['пр_чина', 'и'], ['пр_язнь', 'и'], ['непр_личный', 'и'], ['непр_хотливый', 'и'], ['пр_близительно', 'и'], ['пр_емлемый', 'и'], ['непр_емлемый', 'и'], ['пр_каз', 'и'], ['пр_урочить', 'и'], ['пр_ватный', 'и'], ['непр_ступная (крепость)', 'и'], ['супер_яхта', 'ъ'], ['из_ян', 'ъ'], ['ин_екция', 'ъ'], ['под_есаул', 'ъ'], ['ад_ютант', 'ъ'], ['неот_емлемый', 'ъ'], ['аб_юрация', 'ъ'], ['диз_юнкция', 'ъ'], ['кон_юнктивит', 'ъ'], ['кон_ектура', 'ъ'], ['пан_европейский', 'ъ'], ['транс_европейский', 'ъ'], ['фельд_егерь', 'ъ'], ['под_ячий', 'ь'], ['п_едестал', 'ь'], ['ар_ергард', 'ь'], ['порт_ера', 'ь'], ['пр_бывать (находиться)', 'е'], ['пр_бывать (пр_езжать)', 'и'], ['пр_емник (наследник)', 'е'], ['пр_емник (радиоаппарат)', 'и'], ['пр_зирать (ненавидеть)', 'е'], ['пр_зирать (заботиться)', 'и'], ['пр_ступить (нарушить)', 'е'], ['пр_ступить (начать)', 'и'], ['пр_творить (осуществить)', 'е'], ['пр_творить (закрыть)', 'и'], ['пр_дать (изменить)', 'е'], ['пр_дать (добавить усилить)', 'и'], ['пр_дел (конец)', 'е'], ['пр_дел (пр_стройка)', 'и'], ['пр_ходящее (временное)', 'е'], ['пр_ходящий (тот кто пр_ходит)', 'и'], ['пр_клоняться (уважать)', 'е'], ['приклоняться (наклониться)', 'я'], ['пр_вратный (неправильно истолковали)', 'е'], ['пр_вратник (тот который охраняет ворота)', 'и'], ['непр_ложный (тот который нельзя переделать)', 'е'], ['пр_ложение (добавление)', 'и'], ['пр_терпеть (ся) (пр_выкнуть)', 'и'], ['пр_терпеть (пережить)', 'е']],
                [],
                [],
                [['брезж_щий', 'у'], ['внемл_щий', 'ю'], ['всклокоч_нный', 'е'], ['выровн_нный', 'е'], ['движ_мый', 'и'], ['муч_мый', 'и'], ['дремл_щий', 'ю'], ['кле_щий', 'я'], ['колебл_щийся', 'ю'], ['колыш_щийся', 'у'], ['мел_щий (кофе)', 'ю'], ['обрыз_нный', 'е'], ['незыбл_мый', 'е'], ['немысл_мый', 'и'], ['неотъемл_мый', 'е'], ['тащ_щий', 'а'], ['приемл_мый', 'е'], ['стел_щий (стелить)', 'ю'], ['пыш_щий (здоровьем)', 'у']],
                [],
                [],
                [['назва_ый брат', 'н'], ['посаже_ый отец', 'н'], ['смышле_ый ребенок', 'н'], ['прида_ое невесты', 'н'], ['проще_ое воскресенье', 'н'], ['конче_ый человек', 'н'], ['варе_ик', 'н'], ['труже_ик', 'н'], ['муче_ик', 'н'], ['масле_ица', 'н'], ['гости_ый', 'н'], ['подли_ый', 'нн'], ['недюжи_ый', 'нн'], ['преда_ый', 'нн'], ['исти_ый', 'нн'], ['ветря_ая мельница', 'н'], ['ветре_ый человек', 'н'], ['ветре_о', 'н'], ['безветре_ый день', 'нн'], ['поисти_е', 'н'], ['нежда_ый', 'нн'], ['нечая_ый', 'нн'], ['неожида_ый', 'нн'], ['медле_ый', 'нн'], ['жела_ый', 'нн'], ['виде_ый', 'нн'], ['нежда_ый', 'нн'], ['негада_ый', 'нн'], ['невида_ый', 'нн'], ['неслыха_ый', 'нн'], ['жема_ый', 'нн'], ['свяще_ый', 'нн'], ['обеща_ый', 'нн'], ['отчая_ый', 'нн'], ['чека_ый', 'нн']],
                [['Образование Древнерусского государства', 'IX'], ['«Призвание варягов» на Русь', '862'], ['Княжение Рюрика в Новгороде', '862–879'], ['Княжение Олега в Киеве', '879–912'], ['Объединение Новгорода и Киева в единое государство при князе Олеге', '882'], ['Походы Олега на Царьград. Договоры с греками', '907, 911'], ['Княжение Игоря в Киеве', '912–945'], ['Восстание древлян', '945'], ['Правление княгини Ольги в малолетстве ее сына князя Святослава', '945–962'], ['Крещение княгини Ольги в Константинополе', '957'], ['Княжение Святослава Игоревича', '962–972'], ['Военные походы князя Святослава', '964–972'], ['Княжение Владимира I Святославича Святого', '980–1015'], ['Принятие христианства на Руси', '988'], ['Княжение Ярослава Мудрого', '1019–1054'], ['Начало строительства храма С Софии в Киеве', '1037'], ['Начало строительства храма С Софии в Новгороде Великом', '1045'], ['Окончательное оформление «Русской Правды» («Правда Ярославичей»)', '1072'], ['Съезд князей в Любече. Закрепление раздробленности Древнерусского государства', '1097'], ['Великое княжение Владимира Мономаха', '1113–1125'], ['Княжение Юрия Владимировича Долгорукого во Владимире', '1125–1157'], ['Установление республики в Новгороде', '1136'], ['Первое упоминание о Москве в летописи', '1147'], ['Княжение Андрея Юрьевича Боголюбского', '1157–1174'], ['Постройка храма Покрова на Нерли', '1165'], ['Поход князя Игоря Новгород Северского на половце «Слово о полку Игореве»', '1185'], ['Объединение Волынского и Галицкого княжес', '1199'], ['Образование Ордена меченосц', '1202'], ['Битва на реке Калке', '1223, 31 мая.'], ['Нашествие монголо татар во главе с ханом Батыем на Русь', '1237–1240'], ['Объединение Тевтонского ордена с Орденом меченосце Образование Ливонского ордена', '1237'], ['Битва на реке Сити', '1238, 4 марта.'], ['Невская битва. Разгром князем Александром Ярославичем шведских рыцарей на реке Неве. Прозван Невским', '1240, 15 июля.'], ['Разгром монголо-татарами Киева', '1240'], ['Ледовое побоище. Разгром князем Александром Ярославичем Невским крестоносцев на Чудском озере', '1242, 5 апреля.'], ['Образование государства Золотая Орда', '1243'], ['Княжение Александра Невского на великокняжеском владимирском престоле', '1252–1263'], ['Распад Галицко Волынского княжества под ударами Орды', '1264'], ['1276 – Образование самостоятельного Московского княжества', '1276 – Образование самостоятельного Московского княжества'], ['Правление князя Ивана Калиты в Москве', '1325–1340'], ['Перенесение резиденции главы Русской православной церкви–митрополита–из Владимира в Москву, превращение Москвы в общерусский религиозный центр', '1326'], ['Восстание в Твери против золотоордынц', '1327'], ['Правление князя (с 1362 –великого князя) Дмитрия Ивановича (после 1380 –Донского) в Москве', '1359–1389'], ['Жизнь и деятельность Андрея Рублева', '1360–1430'], ['Битва на реке Воже', '1378'], ['Куликовская битва', '1380, 8 сентября.'], ['Разгром Москвы Тохтамышем', '1382'], ['Княжение Василия I Дмитриевича', '1389–1425'], ['Грюнвальдская битва. Разгром Тевтонского ордена', '1410, 15 июля.'], ['Династическая война между сыновьями и внуками Дмитрия Донского', '1425–1453'], ['Флорентийская церковная уния об объединении католической и православной церквей под главенством Папы Римского. Акт об унии подписан русским митрополитом Исидором, за что он был низложен', '1439'], ['Избрание епископа Рязанского Ионы митрополитом Русской православной церкви и вся Руси. Установление автокефалии (самостоятельности) Русской православной церкви от Византии', '1448'], ['Падение Византийской империи', '1453'], ['Княжение Ивана III', '1462–1505'], ['Присоединение к Москве Ярославля', '1463'], ['Путешествие Афанасия Никитина в Индию', '1469–1472'], ['Сражение на реке Шелони московских и новгородских войск', '1471'], ['Присоединение Новгорода Великого к Москве', '1478'], ['«Стояние на реке Угре». Ликвидация ордынского ига', '1480'], ['Строительство нынешнего Московского Кремля. Сооружение соборов и Грановитой палаты, кирпичных стен', '1484–1508'], ['Присоединение Твери к Москве', '1485'], ['Составление «Судебника» Ивана III. Установление единых норм уголовной ответственности и судебно процессуальных норм для всей страны, ограничение права крестьянского перехода от одного феодала к другому – неделя до и неделя после 26 ноября (Юрьева дня осеннего). Конец XV – начало XVI  – Завершение процесса складывания Российского централизованного государства', '1497'], ['Полемика между Нилом Сорским (лидером нестяжателей, проповедовавших отказ церкви от всякого имущества) и игуменом Иосифом Волоцким (лидером стяжателей, сторонника сохранения церковного землевладения). Осуждение взглядов нестяжателей на церковном Cоборе', '1503'], ['Присоединение к Москве Юго Западных русских земель', '1503'], ['Правление Василия III', '1505–1533'], ['Присоединение Пскова к Москве', '1510'], ['Присоединение Смоленска к Москве', '1514'], ['Присоединение Рязани к Москве', '1521'], ['Правление великого князя Ивана IV Грозного', '1533–1584'], ['Венчание Ивана IV Грозного на царство', '1547'], ['Начало созыва Земских собор', '1549'], ['Принятие «Судебника» Ивана IV Грозного', '1550'], ['«Стоглавый собор» Русской православной церкви', '1551'], ['Присоединение Казани к Москве', '1552'], ['Строительство Покровского собора в Москве (храма Василия Блаженного)', '1555–1560'], ['Присоединение Астрахани к Москве', '1556'], ['Принятие «Уложения о службе»', '1556'], ['Ливонская война', '1558–1583'], ['Разгром Ливонского ордена', '1561'], ['Начало книгопечатания на Руси. Издание Иваном Федоровым «Апостола»–первой печатной книги, имеющей установленную дату', '1564'], ['Опричнина Ивана IV Грозного', '1565–1572'], ['Заключение Люблинской унии об объединении Польши с Великим княжеством Литовским в одно государство–Речь Посполитую', '1569'], ['Первое упоминание о «заповедных летах»', '1581'], ['Поход Ермака в Сибирь', '1581'], ['Подписание Ям Запольского перемирия России с Речью Посполитой', '1582'], ['Заключение Плюсского перемирия со Швецией', '1583'], ['Царствование Федора Иоанновича', '1584–1598'], ['Учреждение патриаршества на Руси. Патриарх И', '1589'], ['Указ об «урочных летах» (пятилетнем сроке сыска беглых крестьян)', '1597'], ['Правление Бориса Годунова', '1598–1605'], ['Восстание крестьян и холопов под предводительством Хлопка', '1603'], ['1605–1606 –Правление Лжедмитрия I', '1605–1606 –Правление Лжедмитрия I'], ['Восстание крестьян под предводительством Ивана Болотникова', '1606–1607'], ['Правление царя Василия Шуйского', '1606–1610'], ['Попытка Лжедмитрия II захватить власть в России. Существование «Тушинского лагеря»', '1607–1610'], ['Оборона Смоленска', '1609–1611'], ['«Семибоярщина»', '1610–1613'], ['Первое ополчение против польских войск во главе с П. Ляпуновым', '1611, март – июнь.'], ['Второе ополчение под руководством Д. Пожарского и К. Минина', '1612'], ['Освобождение Москвы от польских интервентов Вторым ополчением', '1612, 26 октября.'], ['Избрание Земским собором Михаила Романова на царство. Начало династии Романовых. 1613–1645 –Царствование Михаила Федоровича Романова', '1613'], ['Заключение Столбовского «вечного мира» со Швецией', '1617'], ['Деулинское перемирие с Польшей', '1618'], ['Смоленская война между Россией и Речью Посполитой', '1632–1634'], ['Правление царя Алексея Михайловича', '1645–1676'], ['Экспедиция Семена Дежнева по реке Колыме и Ледовитому океану', '1648'], ['Начало восстания Богдана Хмельницкого на Украине', '1648'], ['«Соляной бунт» в Москве', '1648'], ['Восстания в различных городах России', '1648–1650'], ['Принятие Земским собором нового свода законов–«Соборного уложения» царя Алексея Михайловича. Окончательное закрепощение крестьян', '1649'], ['Реформа патриарха Никона. Начало церковного раскола', '1653–1656'], ['Переяславская рада. Воссоединение Украины с Россией', '1654, 8 января.'], ['Война России с Речью Посполитой за Украину', '1654–1667'], ['«Медный бунт» в Москве', '1662'], ['Заключение Андрусовского перемирия между Россией и Речью Посполитной', '1667'], ['Введение Новоторгового устава', '1667'], ['Крестьянская война под предводительством Степана Разина', '1667–1671'], ['Рождение Петра I', '1672, 30 мая.'], ['Правление Федора Алексеевича', '1676–1682'], ['Отмена местничества', '1682'], ['Стрелецкие восстания в Москве', '1682, 1698'], ['Царствование Петра I (1682–1689 –при регентстве Софьи, до 1696 –совместно с Иваном V)', '1682–1725'], ['«Вечный мир» с Польшей', '1686'], ['Открытие Славяно греко латинской академии', '1687'], ['Походы Петра I на Аз', '1695, 1696'], ['«Великое посольство»', '1697–1698'], ['Северная война', '1700–1721'], ['Основание Санкт Петербурга', '1703, 16 мая.'], ['Крестьянское восстание под предводительством К. Булавина', '1707–1708'], ['Битва при деревни Лесной', '1708, 28 сентября.'], ['Полтавская битва', '1709, 27 июня.'], ['Прутский поход', '1710–1711'], ['Учреждение Сената', '1711'], ['Жизнь и деятельность М. В. Ломоносова', '1711–1765'], ['Указ о единонаследии (отменен в 1731 )', '1714'], ['Сражение при мысе Гангут', '1714, 27 июля.'], ['Учреждение коллегий', '1718–1721'], ['Сражение у острова Гренгам', '1720'], ['Ништадтский мир со Швецией', '1721'], ['Провозглашение Петра I императором. Россия стала империей', '1721'], ['Принятие «Табели о рангах»', '1722'], ['Подписание указа о наследии престола', '1722'], ['Каспийский поход', '1722–1723'], ['Открытие Академии наук в Санкт Петербурге', '1725'], ['Правление Екатерины I', '1725–1727'], ['Правление Петра II', '1727–1730'], ['Правление Анны Иоанновны. «Бироновщина»', '1730–1740'], ['Правление Елизаветы Петровны', '1741–1761'], ['Открытие Московского университета', '1755, 25 января.'], ['Семилетняя война', '1756–1763'], ['Основание в Санкт Петербурге Академии художес', '1757'], ['Правление Петра III', '1761–1762'], ['«Манифест о вольности дворянской»', '1762'], ['Правление Екатерины II', '1762–1796'], ['Русско турецкая война', '1768–1774'], ['Победа русского флота над турецким в битве при Чесме и русских сухопутных сил над турецкой армией в сражениях у рек Ларга и Кагул', '1770'], ['Заключение Кючук Кайнарджийского мира по итогам русско турецкой войны. Крымское ханство переходило под протекторат России. Россия получала территорию Причерноморья между Днепром и Южным Бугом, крепости Азов, Керчь, Кинбурн, право свободного прохода российских торговых кораблей через черноморские проливы', '1774'], ['Разделы Польши между Пруссией, Австрией и Россией. К России отошли территории Правобережной Украины, Белоруссии, часть Прибалтики и Польши', '1772, 1793, 1795'], ['Жизнь и деятельность М. М. Сперанского', '1772–1839'], ['Крестьянская война под предводительством Емельяна Пугачева', '1773–1775'], ['Проведение губернской реформы в Российской империи', '1775'], ['Открытие памятника Петру I «Медный всадник» (Э. Фальконе)', '1782'], ['Вхождение Крыма в состав Российской империи. Георгиевский трактат. Переход Восточной Грузии под протекторат России', '1783'], ['Издание жалованных грамот дворянству и городам', '1785'], ['Русско турецкая война', '1787–1791'], ['Победы русских войск под командованием А. В. Суворова при Фокшанах и Рымнике', '1789'], ['Победа русского флота над турецким в сражении при мысе Калиакрия', '1790'], ['Выход в свет книги А. Н. Радищева «Путешествие из Петербурга в Москву»', '1790'], ['Взятие русскими войсками под командованием А. В. Суворова турецкой крепости Измаил на Дунае', '1790'], ['Заключение Ясского мира по итогам русско турецкой войны. Подтверждалось присоединение к России Крыма и Кубани, территории Причерноморья между Южным Бугом и Днестром', '1791'], ['Восстание в Польше под предводительством Тадеуша Костюшко', '1794'], ['Правление Павла I', '1796–1801'], ['Отмена установленного Петром I порядка престолонаследия. Восстановление порядка наследования престола по праву первородства по мужской линии', '1797'], ['Издание Павлом I манифеста о трехдневной барщине', '1797'], ['Итальянский и Швейцарский походы А. В. Суворова', '1799'], ['Правление Александра I', '1801–1825'], ['Учреждение министерств вместо коллегий', '1802'], ['Указ о «вольных хлебопашцах»', '1803'], ['Принятие устава, вводившего автономию университет', '1803'], ['Первая русская кругосветная экспедиция под руководством И. Ф. Крузенштерна и Ю. Ф. Лисянского', '1803–1804'], ['Русско иранская война. Окончилась Гюлистанским миром', '1804–1813'], ['Участие России в III и IV антинаполеоновских коалициях', '1805–1807'], ['Поражение русских и австрийских войск в сражении при Аустерлице', '1805, декабрь.'], ['Русско турецкая война', '1806–1812'], ['Поражение русской армии под Фридландом', '1807'], ['Заключение Тильзитского мира между Александром I и Наполеоном Бонапартом (присоединение России к континентальной блокаде Англии, согласие России на создание вассального Франции Герцогства Варшавского)', '1807'], ['Русско шведская война. Присоединение Финляндии к Российской империи', '1808–1809'], ['Создание Государственного совета по инициативе М. М. Сперанского', '1810'], ['декабрь.:Отечественная война с Наполеоном', '1812, июнь'], ['Заключение Бухарестского мира по итогам русско турецкой войны', '1812'], ['Бородинская битва', '1812, 26 августа.'], ['Заграничные походы русской армии', '1813–1814'], ['«Битва народов» при Лейпциге', '1813'], ['Заключение Гюлистанского мира по итогам русско иранской войны', '1813'], ['Венский конгресс европейских государст Решение вопросов устройства Европы после Наполеоновских войн. Присоединение к России Герцогства Варшавского (Царства Польского)', '1814–1815'], ['Создание «Священного союза»', '1815'], ['Дарование Александром I Царству Польскому Конституции', '1815'], ['Начало массового создания военных поселений по инициативе А. А. Аракчеева', '1816'], ['Деятельность «Союза спасения»', '1816–1817'], ['Кавказская война', '1817–1864'], ['Деятельность «Союза благоденствия»', '1818–1821'], ['Открытие Антарктиды российскими мореплавателями под командованием Ф. Ф. Беллинсгаузена и М. П. Лазарева.', '1820'], ['Образование Северного и Южного обществ декабрист', '1821–1822'], ['Жизнь и деятельность Ф. М. Достоевского', '1821–1881'], ['Восстание декабристов на Сенатской площади в Петербурге', '1825, 14 декабря.'], ['Восстание Черниговского полка', '1825, 29 декабря–1826, 3 января.'], ['Правление Николая I', '1825–1855'], ['Русско иранская война', '1826–1828'], ['Заключение Туркманчайского мира по итогам русско иранской войны. Гибель А. С. Грибоедова', '1828'], ['Русско турецкая война', '1828–1829'], ['Заключение Адрианопольского мира по итогам русско турецкой войны', '1829'], ['Деятельность кружка Н. В. Станкевича', '1831–1839'], ['Открытие первой железной дороги Петербург–Царское Село', '1837'], ['Проведение П.Д Киселевым реформы управления государственными крестьянами', '1837–1841'], ['Споры между славянофилами и западниками', '1840–1850-е'], ['Денежная реформа Е. Ф. Канкрина', '1839–1843'], ['Жизнь и деятельность П. И. Чайковского', '1840–1893'], ['Деятельность кружка М. В. Буташевича– Петрашевского', '1844–1849'], ['Открытие железной дороги Москва – Санкт Петербу', '1851'], ['Крымская война', '1853–1856'], ['Сражение при Синопе', '1853, ноябрь.'], ['Правление Александра II', '1855–1881'], ['Парижский конгресс', '1856'], ['Основание П. М. Третьяковым коллекции русского искусства в Москве', '1856'], ['Айгунский и Пекинский договоры с Китаем', '1858, 1860'], ['Отмена крепостного права в России', '1861, 19 февраля.'], ['Деятельность организации «Земля и воля»', '1861–1864'], ['Образование «Могучей кучки»:объединения композиторов (М. А. Балакирев, Ц. А. Кюи, М. П. Мусоргский, Н. А. Римский Корсаков, А. П. Бородин)', '1862'], ['Земская, судебная и школьная реформы', '1864'], ['Присоединение Средней Азии к Российской империи', '1864–1885'], ['Продажа Аляски США', '1867'], ['Открытие Д. И. Менделеевым Периодического закона химических элемент', '1869'], ['Реформа городского самоуправления', '1870'], ['Деятельность «Товарищества передвижных художественных выставок»', '1870–1923'], ['Создание «Союза трех императоров»', '1873'], ['Проведение военной реформы – введение всеобщей воинской обязанности', '1874'], ['Осуществление народниками «хождений в народ»', '1874, 1876'], ['Деятельность новой организации «Земля и воля»', '1876–1879'], ['Русско турецкая война', '1877–1878'], ['Сан-Стефанский мирный договор', '1878'], ['Берлинский конгресс', '1878'], ['Раскол организации «Земля и воля». Возникновение организаций «Народная воля» и «Черный передел»', '1879'], ['Деятельность организации «Народная воля»', '1879–1881'], ['Оформление Тройственного союза', '1879–1882'], ['Убийство народовольцами Александра II', '1881, 1 марта.'], ['Правление Александра III', '1881–1894'], ['Отмена временнообязанного положения крестьян. Перевод крестьян на обязательный выкуп', '1882'], ['Деятельность группы «Освобождение труда»', '1883–1903'], ['Стачка на Никольской мануфактуре Т. С. Морозова в Орехово Зуеве (Морозовская стачка)', '1885'], ['Принятие циркуляра «о кухаркиных детях»', '1887'], ['Принятие «Положения о земских начальниках»', '1889'], ['Оформление франко русского союза', '1891–1893'], ['Строительство Транссибирской железнодорожной магистрали', '1891–1905'], ['Передача П. М. Третьяковым своей коллекции русского искусства в дар городу Москве', '1892'], ['Правление Николая II', '1894–1917'], ['Изобретение А. С. Поповым радиосвязи', '1895'], ['Создание «Союза борьбы за освобождение рабочего класса»', '1895'], ['Первая всеобщая перепись населения России', '1897'], ['Денежная реформа С. Ю. Витте', '1897'], ['I съезд РСДРП', '1898'], ['Гаагская мирная конференция 26 держав по проблемам разоружения, созванная по инициативе России. Россия в XX', '1899'], ['Создание партии социалистов-революционеров (эсеров) в результате объединения неонароднических кружк', '1901–1902'], ['II съезд РСДРП. Создание партии', '1903'], ['Создание «Союза земцев конституционалистов»', '1903'], ['Русско японская война', '1904–1905'], ['Сражение под городом Ляоян', '1904, август.'], ['Сражение на реке Шахэ', '1904, сентябрь.'], ['«Кровавое воскресенье». Начало первой российской революции', '1905, 9 января.'], ['Первая российская революция', '1905–1907'], ['Поражение русской армии под городом Мукденом', '1905, февраль.'], ['Гибель русского флота возле острова Цусима', '1905, май.'], ['Восстание на броненосце «Князь Потемкин-Таврический»', '1905, июнь.'], ['Заключение Портсмутского мирного договора по итогам русско японской войны. Россия уступала Японии южную часть Сахалина, арендные права на Ляодунский полуостров и Южно Маньчжурскую железную дорогу', '1905, август.'], ['Издание Манифеста «Об усовершенствовании государственного порядка»', '1905, 17 октября.'], ['Создание «Союза русского народа»', '1905, ноябрь.'], ['Вооруженное восстание в Москве и ряде других город', '1905, декабрь.'], ['Деятельность I Государственной думы', '1906, апрель – июль.'], ['Указ о выходе крестьян из общины. Начало проведения столыпинской аграрной реформы', '1906, 9 ноября.'], ['Деятельность II Государственной думы', '1907, февраль – июнь.'], ['Роспуск II Государственной думы. Принятие нового избирательного закона (третьеиюньский переворот)', '1907, 3 июня.'], ['Деятельность III Государственной думы', '1907–1912'], ['Русско английское соглашение о разграничении зон влияния в Иране, Афганистане и Тибете. Окончательное оформление союза «Антанта»', '1907, август'], ['Ленский расстрел', '1912'], ['Деятельность IV Государственной думы', '1912–1917'], ['Первая мировая война', '1914, 1 августа – 1918, 9 ноября.']]]
async def stats(message: Message):
    conn = sqlite3.connect('stats.db')
    cur = conn.cursor()
    sqlite_select_query = f"""SELECT rights from Stats where user_id = {message.chat.id}"""
    cur.execute(sqlite_select_query)
    right = str(cur.fetchall()[0])
    sqlite_select_query = f"""SELECT wrongs from Stats where user_id = {message.chat.id}"""
    cur.execute(sqlite_select_query)
    wrong = str(cur.fetchall()[0])
    right = right.replace('(', '')
    right = right.replace(')', '')
    right = right.replace("'", '')
    right = right.replace(',', '')
    wrong = wrong.replace('(', '')
    wrong = wrong.replace(')', '')
    wrong = wrong.replace("'", '')
    wrong = wrong.replace(',', '')
    # print(right)
    # print(wrong)
    cor = int(right)
    uncor = int(wrong)
    cur.close()
    conn.close()
    if (cor + uncor == 0):
        await message.answer(
            "Ты пока не выполнил ни одного задания :(",
            reply_markup=keyboard.start_kb
        )
    else:
        await message.answer(
            f'Ты сделал верно {cor} из {cor + uncor} заданий ({math.ceil(cor / (cor + uncor) * 100)}%). Что-то ещё?',
            reply_markup=keyboard.start_kb
        )

async def get_stats(chat_id):
    conn = sqlite3.connect('stats.db')
    cur = conn.cursor()
    cur.execute(f'SELECT COUNT (*) from Stats where user_id = {chat_id}')
    tmp = str(cur.fetchall()[0])
    tmp = tmp.replace('(', '')
    tmp = tmp.replace(')', '')
    tmp = tmp.replace("'", '')
    tmp = tmp.replace(',', '')
    # print(tmp)
    cnt = int(tmp)
    if (cnt == 0):
        cur.execute('INSERT INTO Stats (user_id, rights, wrongs) VALUES (?, ?, ?)',
                    (chat_id, 0, 0))
    conn.commit()
    cur.close()
    conn.close()

async def update_stats_rights(chat_id):
    conn = sqlite3.connect('stats.db')
    cur = conn.cursor()
    sqlite_select_query = f"""UPDATE Stats SET rights = rights + 1 where user_id = {chat_id}"""
    cur.execute(sqlite_select_query)
    conn.commit()
    cur.close()
    conn.close()

async def update_stats_wrongs(chat_id):
    conn = sqlite3.connect('stats.db')
    cur = conn.cursor()
    sqlite_select_query = f"""UPDATE Stats SET wrongs = wrongs + 1 where user_id = {chat_id}"""
    cur.execute(sqlite_select_query)
    conn.commit()
    cur.close()
    conn.close()

#list_of_words = []
#list_of_answers = []
async def get_task(chat_id, task_id):
    #global list_of_words
    conn = sqlite3.connect('tasks.db')
    cur = conn.cursor()
    sqlite_select_query = f"""SELECT * from Tasks where user_id = {chat_id}"""
    cur.execute(sqlite_select_query)
    #cur.execute(f"SELECT words * FROM Tasks * WHERE user_id = {message.chat.id}")
    list_of_words = cur.fetchall()
    cur.close()
    conn.close()

async def get_task_words(chat_id, task_id):
    conn = sqlite3.connect('training.db')
    cur = conn.cursor()

    sqlite_select_query = f"""SELECT rights from Training where user_id = {chat_id}"""
    cur.execute(sqlite_select_query)
    rights = cur.fetchall()

    sqlite_select_query = f"""SELECT wrongs from Training where user_id = {chat_id}"""
    cur.execute(sqlite_select_query)
    wrongs = cur.fetchall()

    cur.close()
    conn.close()

    v = []
    for i in range(len(rights)):
        s1 = str(rights[i])
        s2 = str(wrongs[i])
        s1 = s1.replace('(', '')
        s1 = s1.replace(')', '')
        s1 = s1.replace("'", '')
        s2 = s2.replace('(', '')
        s2 = s2.replace(')', '')
        s2 = s2.replace("'", '')

        if (task_id != 4):
            s1 = s1.replace(',', '')
            s2 = s2.replace(',', '')
        else:
            if (s1[-1] == ','):
                s1 = s1[:-1:]
            if (s2[-1] == ','):
                s2 = s2[:-1:]
        v.append([s2, s1])

    return v

async def get_task_training(chat_id, task_id):
    #global list_of_words
    #global list_of_answers
    conn = sqlite3.connect('tasks.db')
    cur = conn.cursor()
    # print(task_id)
    sqlite_select_query = f"""SELECT words from Tasks where (user_id = {chat_id} and task_id = {task_id})"""
    cur.execute(sqlite_select_query)
    # cur.execute(f"SELECT words * FROM Tasks * WHERE user_id = {message.chat.id}")
    list_of_words = cur.fetchall()
    sqlite_select_query = f"""SELECT answers from Tasks where (user_id = {chat_id} and task_id = {task_id})"""
    cur.execute(sqlite_select_query)
    list_of_answers = cur.fetchall()
    cur.close()
    conn.close()


async def add_task(chat_id, task_id, a, b):
    conn = sqlite3.connect('tasks.db')
    cur = conn.cursor()
    cur.execute('INSERT INTO Tasks (user_id, task_id, words, answers) VALUES (?, ?, ?, ?)',
                (chat_id, task_id, a, b))
    conn.commit()
    cur.close()
    conn.close()

task_words = []

@router.message(Main_menu.exercise)
async def start_training(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = int(data['key'])
    task_id = int(data['task_id'])
    step = int(data['step'])
    #flag_trainig = bool(data['flag_training'])
    answer_true = int(data['answer_true'])
    answer_false = int(data['answer_false'])
    '''
    conn = sqlite3.connect('variables.db')
    cur = conn.cursor()

    sqlite_select_query = f"""SELECT step from Variables where (user_id = {chat_id})"""
    cur.execute(sqlite_select_query)
    step = int(cur.fetchall()[0])

    sqlite_select_query = f"""SELECT flag_trainig from Variables where (user_id = {chat_id})"""
    cur.execute(sqlite_select_query)
    flag_trainig = bool(cur.fetchall()[0])

    cur.close()
    conn.close()
    '''


    #global task_id         +
    #global step            +
    #global flag_trainig    +
    #global list_of_words   +
    #global list_of_answers +
    if (step == 0):
        if (message.text.isdigit()):
            await state.update_data(task_id=message.text)
            await state.update_data(flag_training=True)

            data = await state.get_data()
            task_id = int(data['task_id'])
            chat_id = int(data['key'])

            conn = sqlite3.connect('tasks.db')
            cur = conn.cursor()

            sqlite_select_query = f"""SELECT answers from Tasks where (user_id = {int((await state.get_data())['key'])} and task_id = {(await state.get_data())['task_id']})"""
            cur.execute(sqlite_select_query)
            list_of_answers = cur.fetchall()

            sqlite_select_query = f"""SELECT words from Tasks where (user_id = {int((await state.get_data())['key'])} and task_id = {(await state.get_data())['task_id']})"""
            cur.execute(sqlite_select_query)
            list_of_words = cur.fetchall()

            cur.close()
            conn.close()

            '''
            conn = sqlite3.connect('variables.db')
            cur = conn.cursor()
            sqlite_select_query = f"""UPDATE Variables SET flag_training = True where user_id = {chat_id}"""
            cur.execute(sqlite_select_query)
            conn.commit()
            cur.close()
            conn.close()
            '''
            #flag_trainig = True  +
        else:
            await message.answer(
                f'Укажи номер задания',
            )
    #print((await state.get_data())['flag_training'])
    if ((await state.get_data())['flag_training'] == True or step != 0):
        try:
            #global answer_true   +
            #global answer_false  +
            #global task_words
            task_words = list(await get_task_words(int((await state.get_data())['key']), int((await state.get_data())['task_id'])))
            #print(type(task_words))

            '''
            conn = sqlite3.connect('training.db')
            cur = conn.cursor()

            sqlite_select_query = f"""SELECT answers from Training where (user_id = {chat_id})"""
            cur.execute(sqlite_select_query)
            task_words = cur.fetchall()

            cur.close()
            conn.close()
            '''

            if (step == 0):
                if (message.text.lower() == "стоп" or message.text.strip() == "Стоп"):

                    await state.update_data(step=0)
                    await state.update_data(task_id=0)

                    conn = sqlite3.connect('training.db')
                    cur = conn.cursor()

                    sqlite_select_query = f"""DELETE from Training where (user_id = {int((await state.get_data())['key'])})"""
                    cur.execute(sqlite_select_query)

                    conn.commit()
                    cur.close()
                    conn.close()

                    # step = 0         +
                    # task_id = 0      +
                    # task_words = []  +
                    markup = keyboard.start_kb
                    await message.answer(
                        f'Ты сделал верно {int((await state.get_data())['answer_true'])} из {int((await state.get_data())['answer_true']) + int((await state.get_data())['answer_false'])} заданий. Что-то ещё?',
                        reply_markup=markup)
                    await state.update_data(answer_true=0)
                    await state.update_data(answer_false=0)
                    await state.update_data(flag_trainig=False)
                    # answer_true = 0      +
                    # answer_false = 0     +
                    # flag_trainig = False +
                    await state.set_state(Main_menu.mode)
                else:
                    '''
                    conn = sqlite3.connect('tasks.db')
                    cur = conn.cursor()
                    # print(task_id)
                    sqlite_select_query = f"""SELECT words from Tasks where (user_id = {message.chat.id} and task_id = {task_id})"""
                    cur.execute(sqlite_select_query)
                    # cur.execute(f"SELECT words * FROM Tasks * WHERE user_id = {message.chat.id}")
                    list_of_words = cur.fetchall()
                    sqlite_select_query = f"""SELECT answers from Tasks where (user_id = {message.chat.id} and task_id = {task_id})"""
                    cur.execute(sqlite_select_query)
                    list_of_answers = cur.fetchall()
                    cur.close()
                    conn.close()
                    '''
                    #lock = threading.Lock()
                    if (int((await state.get_data())['task_id']) == 4):
                        task_words = task_4
                    else:
                        #await get_task_training(message.chat.id)
                        conn = sqlite3.connect('tasks.db')
                        cur = conn.cursor()
                        # print(task_id)
                        sqlite_select_query = f"""SELECT words from Tasks where (user_id = {(await state.get_data())['key']} and task_id = {(await state.get_data())['task_id']})"""
                        cur.execute(sqlite_select_query)
                        # cur.execute(f"SELECT words * FROM Tasks * WHERE user_id = {message.chat.id}")
                        list_of_words = cur.fetchall()
                        sqlite_select_query = f"""SELECT answers from Tasks where (user_id = {(await state.get_data())['key']} and task_id = {(await state.get_data())['task_id']})"""
                        cur.execute(sqlite_select_query)
                        list_of_answers = cur.fetchall()
                        cur.close()
                        conn.close()
                        for i in range(len(list_of_words)):
                            s1 = str(list_of_words[i])
                            s1 = s1.replace('(', '')
                            s1 = s1.replace(')', '')
                            s1 = s1.replace("'", '')
                            s2 = str(list_of_answers[i])
                            s2 = s2.replace('(', '')
                            s2 = s2.replace(')', '')
                            s2 = s2.replace("'", '')
                            if (int((await state.get_data())['task_id']) != 4):
                                s1 = s1.replace(',', '')
                                s2 = s2.replace(',', '')
                            else:
                                if (s1[-1] == ','):
                                    s1 = s1[:-1:]
                                if (s2[-1] == ','):
                                    s2 = s2[:-1:]
                            task_words.append([s1, s2])
                        task_words = task_words + tasks_new_common[int((await state.get_data())['task_id']) - 9]
                            #(type(task_words))
                            # print(s1)
                            # print(s2)
                        # print(task_words)
                    random.shuffle(task_words)
                    #print(type(task_words))

                    conn = sqlite3.connect('training.db')
                    cur = conn.cursor()

                    sqlite_select_query = f"""DELETE from Training where (user_id = {(await state.get_data())['key']})"""
                    cur.execute(sqlite_select_query)

                    conn.commit()
                    cur.close()
                    conn.close()

                    conn = sqlite3.connect('training.db')
                    cur = conn.cursor()
                    for x, y in task_words:
                        cur.execute('INSERT INTO Training (user_id, rights, wrongs) VALUES (?, ?, ?)',
                                    (int((await state.get_data())['key']), str(y), str(x)))
                    conn.commit()
                    cur.close()
                    conn.close()

                    markup = keyboard.stop_kb
                    if (len(task_words) == 0):
                        await message.answer("Список пуст")
                        await state.update_data(step=0)
                        await state.update_data(task_id=0)
                        #step = 0     +
                        #task_id = 0  +
                        markup = keyboard.start_kb
                        await message.answer("Что-то ещё?",
                                             reply_markup=markup)
                        await state.set_state(Main_menu.mode)
                    else:
                        if (int((await state.get_data())['task_id']) == 4):
                            await message.answer(
                                "Напиши слово целиком, выделив заглавной буквой гласную, на которую падает ударение\nЩавель -> <u>Щ</u>авЕль или <u>щ</u>авЕль", parse_mode=ParseMode.HTML)
                        else:
                            await message.answer("Напиши букву, которая должна стоять на месте пропуска\nПр_рогатива -> е")
                        await message.answer(task_words[step][0], reply_markup=markup)
                        data = await state.get_data()
                        curv = data['step']
                        await state.update_data(step=curv+1)
                        #step += 1
                        await state.set_state(Main_menu.exercise)
                    #lock.release()
            elif (step > 0):
                #print(type(task_words))
                #print(task_words)
                #print(type(message.text.strip()))
                if (message.text.lower() == "стоп" or message.text.strip() == "Стоп"):
                    await state.update_data(step=0)
                    await state.update_data(task_id=0)

                    conn = sqlite3.connect('training.db')
                    cur = conn.cursor()

                    sqlite_select_query = f"""DELETE from Training where (user_id = {(await state.get_data())['key']})"""
                    cur.execute(sqlite_select_query)

                    conn.commit()
                    cur.close()
                    conn.close()

                    #step = 0         +
                    #task_id = 0      +
                    #task_words = []  +
                    markup = keyboard.start_kb
                    await message.answer(
                        f'Ты сделал верно {int((await state.get_data())['answer_true'])} из {int((await state.get_data())['answer_true']) + int((await state.get_data())['answer_false'])} заданий. Что-то ещё?',
                        reply_markup=markup)

                    await state.update_data(answer_true=0)
                    await state.update_data(answer_false=0)
                    await state.update_data(flag_training=False)
                    #answer_true = 0       +
                    #answer_false = 0      +
                    #flag_trainig = False  +
                    await state.set_state(Main_menu.mode)
                elif ((int((await state.get_data())['task_id']) != 4) and (message.text.strip().lower() == (str(task_words[step - 1][1])).lower())) or ((int((await state.get_data())['task_id']) == 4) and (message.text.strip()[1::] == (task_words[step-1][1][1::]).strip())):
                    # print(message.text.strip().lower())
                    # print(task_words[step - 1][1].lower())
                    # print("-----------------")
                    await message.answer("Верно!")
                    #lock = threading.Lock()
                    data = await state.get_data()
                    curv = data['answer_true']
                    await state.update_data(answer_true=curv + 1)
                    #answer_true += 1  +
                    #lock.release()
                    '''
                    conn = sqlite3.connect('stats.db')
                    cur = conn.cursor()
                    sqlite_select_query = f"""UPDATE Stats SET rights = rights + 1 where user_id = {message.chat.id}"""
                    cur.execute(sqlite_select_query)
                    conn.commit()
                    cur.close()
                    conn.close()
                    '''
                    await update_stats_rights(message.chat.id)
                    if (step >= len(task_words)):
                        await state.update_data(step=0)
                        #step = 0  +
                        markup = keyboard.start_kb
                        await message.answer(
                            f'Слова закончились. Ты молодец!\n Ты сделал верно {int((await state.get_data())['answer_true'])} из {int((await state.get_data())['answer_true']) + int((await state.get_data())['answer_false'])} заданий.',
                            reply_markup=markup)

                        await state.update_data(answer_true=0)
                        await state.update_data(answer_false=0)
                        await state.update_data(flag_training=False)
                        conn = sqlite3.connect('training.db')
                        cur = conn.cursor()

                        sqlite_select_query = f"""DELETE from Training where (user_id = {chat_id})"""
                        cur.execute(sqlite_select_query)

                        conn.commit()
                        cur.close()
                        conn.close()

                        # answer_true = 0       +
                        # answer_false = 0      +
                        # flag_trainig = False  +
                        # task_words = []       +
                        await state.set_state(Main_menu.mode)
                    else:
                        await message.answer(task_words[step][0])
                        data = await state.get_data()
                        curv = data['step']
                        await state.update_data(step=curv + 1)
                        #step += 1   +
                        await state.set_state(Main_menu.exercise)
                else:
                    # answer = req_gptshka(task_4[step-1][1])
                    # answer = subject_selection(message.text)
                    # await message.answer( f'Неверно! \nПравильный ответ: {task_4[step-1][1]} \nПопробуй запомнить так: {answer}')
                    # print(message.text.strip()[1:-1:], task_words[step - 1][1][1:-1:])
                    await message.answer(
                        f'Неверно! \nПравильный ответ: {task_words[step - 1][1]}')

                    data = await state.get_data()
                    curv = data['answer_false']
                    await state.update_data(answer_false=curv + 1)

                    #answer_false += 1   +
                    '''
                    conn = sqlite3.connect('stats.db')
                    cur = conn.cursor()
                    sqlite_select_query = f"""UPDATE Stats SET wrongs = wrongs + 1 where user_id = {message.chat.id}"""
                    cur.execute(sqlite_select_query)
                    conn.commit()
                    cur.close()
                    conn.close()
                    '''
                    await update_stats_wrongs(message.chat.id)
                    if (step >= len(task_words)):
                        await state.update_data(step=0)
                        #step = 0   +
                        markup = keyboard.start_kb
                        await message.answer(
                            f'Слова закончились. Ты молодец!\nТы сделал верно {int((await state.get_data())['answer_true'])} из {int((await state.get_data())['answer_true']) +int((await state.get_data())['answer_false'])} заданий.',
                            reply_markup=markup)

                        await state.update_data(answer_true=0)
                        await state.update_data(answer_false=0)
                        await state.update_data(flag_training=False)
                        conn = sqlite3.connect('training.db')
                        cur = conn.cursor()

                        sqlite_select_query = f"""DELETE from Training where (user_id = {chat_id})"""
                        cur.execute(sqlite_select_query)

                        conn.commit()
                        cur.close()
                        conn.close()

                        #answer_true = 0        +
                        #answer_false = 0       +
                        #flag_trainig = False   +
                        #task_words = []        +
                        await state.set_state(Main_menu.mode)
                    else:
                        await message.answer(task_words[step][0])
                        data = await state.get_data()
                        curv = data['step']
                        await state.update_data(step=curv + 1)
                        #step += 1   +
                        await state.set_state(Main_menu.exercise)
        except Exception as Exp:
            print(Exp)

#flag_add = False
#word_was = False


@router.message(Main_menu.add)
async def start_training(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = int(data['key'])
    step = int(data['step'])
    task_id = int(data['task_id'])
    #flag_trainig = bool(data['flag_training'])
    flag_add = bool(data['flag_add'])
    word_was = bool(data['word_was'])
    #global task_id        +
    #global step           +
    #global flag_trainig   +
    if ((await state.get_data())['flag_training'] == False):
        if (message.text.isdigit()):
            await state.update_data(task_id=message.text)
            await state.update_data(flag_training=True)
            #flag_trainig = True   +
        else:
            await message.answer(
                f'Укажи номер задания',
            )
    if ((await state.get_data())['flag_training'] == True):
        try:
            #global flag_add
            #global word_was
            if (flag_add == False):
                markup = keyboard.stop_kb
                await message.answer( "На первой строке напиши слово с пропуском '_', на второй правильный ответ \nКогда решишь прекратить, выбери на клавиатуре или напиши слово Стоп", reply_markup=markup)
                await state.update_data(flag_add=True)
                #flag_add = True   +
                #bot.register_next_step_handler(message, add_task)
            else:
                #print(message.text.split('\n'))
                #lock = threading.Lock()
                new_pair = [x.lower() for x in message.text.strip().split('\n')]
                if (message.text.lower() == "стоп" or message.text.strip() == "Стоп"):
                    # main_menu(message)
                    # print("Выход")
                    # bot.register_next_step_handler(message, main_menu)
                    await state.update_data(flag_add=False)
                    await state.update_data(flag_training=False)
                    await state.update_data(task_id=0)
                    #flag_add = 0           +
                    #task_id = 0            +
                    #flag_trainig = False   +
                    markup = keyboard.start_kb
                    await message.answer( "Хорошо!", reply_markup=markup)
                    await state.set_state(Main_menu.mode)
                elif ((len(message.text.strip().split('\n')) == 2) and (diff_letters(new_pair[0], new_pair[1]) == 1)) or ((await state.get_data())['task_id'] == 16 or (await state.get_data())['task_id'] == 4):
                    #await get_task(message.chat.id)
                    await state.update_data(word_was=False)
                    #word_was = False   +
                    conn = sqlite3.connect('tasks.db')
                    cur = conn.cursor()

                    sqlite_select_query = f"""SELECT words from Tasks where (user_id = {chat_id} and task_id = {(await state.get_data())['task_id']})"""
                    cur.execute(sqlite_select_query)
                    list_of_words = cur.fetchall()

                    cur.close()
                    conn.close()

                    for _ in list_of_words:
                        #print(_)
                        if (new_pair[0] in _):
                            await state.update_data(word_was=True)
                            #word_was = True   +
                            break
                    if (not(word_was)):
                        await add_task(message.chat.id,(await state.get_data())['task_id'], new_pair[0], new_pair[1])
                        await message.answer("Добавлено!")
                        #bot.register_next_step_handler(message, add_task)
                    else:
                        await message.answer("Это слово уже добавлено")
                        await state.update_data(word_was=False)
                        #word_was = False   +
                else:
                    await message.answer("Где-то ошибка, проверьте корректность")
                #lock.release()
        except Exception as exp:
            print("ERROR add_task", exp)

@router.message(Main_menu.mode)
async def start_mode(message: Message, state: FSMContext):
    await state.update_data(key=message.chat.id)
    await state.update_data(mode=message.text)
    await state.update_data(step=0)
    await state.update_data(answer_true=0)
    await state.update_data(answer_false=0)
    await state.update_data(task_id=0)
    await state.update_data(flag_training=False)
    await state.update_data(flag_add=False)
    await state.update_data(word_was=False)

    data = await state.get_data()
    if (data["mode"].lower() == 'моя статистика'):
        await state.clear()
        await state.set_state(Main_menu.mode)
        await stats(message)
    elif (data["mode"].lower() == 'тренировка'):
        await state.set_state(Main_menu.exercise)
        markup = keyboard.training_kb
        await message.answer(
            f'Каким заданием хочешь заняться?',
            reply_markup=markup
        )
    elif (data["mode"].lower() == 'добавить слово'):
        await state.set_state(Main_menu.add)
        markup = keyboard.training_kb
        await message.answer(
            f'В какое задание хочешь добавить слово?',
            reply_markup=markup
        )
    else:
        markup = keyboard.training_kb
        await message.answer(
            f'Выбери один из предложенных вариантов',
            reply_markup=markup
        )

#@router.message(Main_menu.task)
#async def start_task(message: Message, state: FSMContext):
#    global task_id
#    if (message.text.isdigit()):
#        await state.update_data(task_id=message.text)
#        data = await state.get_data()
#        task_id = data['task_id']
#        print("task-id", task_id)
#        await state.clear()
#        await state.set_state(Main_menu.exercise)
#    else:
#        await message.answer(
#            f'Укажи номер задания',
#        )

@router.message()
async def start(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(task_id=0)
    #task_id = 0   +
    if (message.text == '/start'):
        await state.clear()
        await message.answer(
            f"Привет, {message.from_user.first_name}!\nЗдесь ты можешь попрактиковаться в орфографии для ЕГЭ.\nДля управления используй встроенную или обычную клавиатуру",
            reply_markup=keyboard.start_kb)
    else:
        await message.answer(f"Что-то ещё?", reply_markup=keyboard.start_kb)
    await get_stats(message.chat.id)
    await state.update_data(key=message.chat.id)
    await state.set_state(Main_menu.mode)
